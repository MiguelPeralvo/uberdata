{"paragraphs":[{"text":"%md ##Criação do Cluster","dateUpdated":"2016-11-25T04:45:23-0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183428_148956703","id":"20160722-151322_1408565797","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Criação do Cluster</h2>\n"},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-25T04:45:15-0200","dateFinished":"2016-11-25T04:45:16-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:93"},{"text":"ClusterSettings.masterInstanceType = \"r3.xlarge\"\nClusterSettings.coreInstanceType = \"r3.xlarge\"\nClusterSettings.coreInstanceCount = 5\n// ClusterSettings.spotPriceFactor = Some(\"1.5\")\nClusterSettings.defaultParallelism = Some(61)\nClusterSettings.clusterName = \"IUberdataApplication\"\nClusterSettings.resume = true\nuc.sparkContext","dateUpdated":"2016-11-29T04:35:58-0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183431_149341452","id":"20160718-134014_937585483","dateCreated":"2016-11-25T11:39:43-0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:94"},{"text":"ClusterSettings.master = Some(\"local[*]\")\nuc.sparkContext\n","dateUpdated":"2016-11-29T08:14:22-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480099531575_1400041951","id":"20161125-164531_1655403265","result":{"code":"SUCCESS","type":"TEXT","msg":"\nClusterSettings.master: Option[String] = Some(local[*])\n\nres0: org.apache.spark.SparkContext = org.apache.spark.SparkContext@1533a0bf\n"},"dateCreated":"2016-11-25T04:45:31-0200","dateStarted":"2016-11-29T08:14:22-0200","dateFinished":"2016-11-29T08:14:41-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:95"},{"text":"%md ##Objetivo\nReduzir os recursos gastos numa campanha de marketing de um banco português.\nA campanha é feita através de contatos telefônicos aos clientes e oferece aplicações de longo prazo.\nA ideia é utilizar a grande quantidade de dados disponíveis no banco para selecionar os clientes com uma maior propensão de adesão.\nDados disponíveis:\n1 - idade \n2 - profissão\n3 - estado civil\n4 - nível de escolaridade \n5 - possui crédito \n6 - possui empréstimo para financiamento de imóvel\n7 - possui empréstimo pessoal \n=> relacionados ao último contato da atual campanha\n8 - tipo de contato \n9 - mês do último contato \n10 - dia da semana do último contato \n11 - duração do último contato \n=> outros atributos:\n12 - número de contatos para a campanha atual e para este cliente \n13 - número de dias corridos depois do último contato relacionado a campanha anterior \n14 - número de contatos feitos antes da campanha atual e para este cliente \n15 - adesão a campanha anterior \n=> dados sobre o contexto econômico e social\n16 - taxa de emprego \n17 - índice de inflação \n18 - índice de confiança do consumidor \n19 - euribor \n20 - número de empregados","dateUpdated":"2016-11-29T04:36:25-0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"tableHide":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183431_149341452","id":"20160722-171247_922445865","result":"org.apache.zeppelin.interpreter.InterpreterException: org.apache.thrift.transport.TTransportException: java.net.ConnectException: Connection refused (Connection refused)","dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-27T01:19:37-0200","dateFinished":"2016-11-27T01:20:08-0200","status":"ERROR","errorMessage":"java.net.ConnectException: Connection refused (Connection refused)\n\tat java.net.PlainSocketImpl.socketConnect(Native Method)\n\tat java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\n\tat java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\n\tat java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\n\tat java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\n\tat java.net.Socket.connect(Socket.java:589)\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:182)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:189)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.init(RemoteInterpreter.java:163)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:328)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.getFormType(LazyOpenInterpreter.java:105)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:260)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:176)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:328)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n","progressUpdateIntervalMs":500,"$$hashKey":"object:96"},{"text":"%md ##Preparação dos dados","dateUpdated":"2016-11-25T11:39:43-0200","config":{"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183431_149341452","id":"20160722-151347_1109967591","dateCreated":"2016-11-25T11:39:43-0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:97"},{"text":"import org.apache.spark.sql.Row\nimport org.apache.spark.sql.types.StructType\nimport org.apache.spark.sql.types.StructType._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\nimport org.apache.spark.sql.Row\nimport eleflow.uberdata.core.data.Dataset._\nimport eleflow.uberdata.core.data.Dataset\nimport eleflow.uberdata.BinaryClassification\nimport eleflow.uberdata.enums.SupportedAlgorithm._","dateUpdated":"2016-11-29T06:14:12-0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183431_149341452","id":"20160718-134028_733061021","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport org.apache.spark.sql.Row\n\nimport org.apache.spark.sql.types.StructType\n\nimport org.apache.spark.sql.types.StructType._\n\nimport org.apache.spark.sql.types._\n\nimport org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n\nimport org.apache.spark.sql.Row\n\nimport eleflow.uberdata.core.data.Dataset._\n\nimport eleflow.uberdata.core.data.Dataset\n\nimport eleflow.uberdata.BinaryClassification\n\nimport eleflow.uberdata.enums.SupportedAlgorithm._\n"},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-29T06:14:15-0200","dateFinished":"2016-11-29T06:14:20-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:98"},{"text":"val dataCollected = uc.load(\"/home/celio/data/telemarketing/additional/bank-additional/bank-additional-full-modif3.csv\").cache","dateUpdated":"2016-11-29T06:16:15-0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183431_149341452","id":"20160718-134830_302936756","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndataCollected: org.apache.spark.sql.DataFrame = [id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: bigint]\n"},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-29T06:16:15-0200","dateFinished":"2016-11-29T06:16:48-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:99"},{"text":"// %r indexes <- parallelize(uc.sparkContext(),  seq(19888,(19888+1290),by=10), 96)\nval initIds = (19888 to 19888+1290 by 100).toList\nval endIds = (39888 to 39888+1290 by 100).toList\nval windows = initIds.zip(endIds)","dateUpdated":"2016-11-28T02:23:24-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183433_147032959","id":"20160718-134858_592463569","result":{"code":"SUCCESS","type":"TEXT","msg":"initIds: List[Int] = List(19888, 19898, 19908, 19918, 19928, 19938, 19948, 19958, 19968, 19978, 19988, 19998, 20008, 20018, 20028, 20038, 20048, 20058, 20068, 20078, 20088, 20098, 20108, 20118, 20128, 20138, 20148, 20158, 20168, 20178, 20188, 20198, 20208, 20218, 20228, 20238, 20248, 20258, 20268, 20278, 20288, 20298, 20308, 20318, 20328, 20338, 20348, 20358, 20368, 20378, 20388, 20398, 20408, 20418, 20428, 20438, 20448, 20458, 20468, 20478, 20488, 20498, 20508, 20518, 20528, 20538, 20548, 20558, 20568, 20578, 20588, 20598, 20608, 20618, 20628, 20638, 20648, 20658, 20668, 20678, 20688, 20698, 20708, 20718, 20728, 20738, 20748, 20758, 20768, 20778, 20788, 20798, 20808, 20818, 20828, 20838, 20848, 20858, 20868, 20878, 20888, 20898, 20908, 20918, 20928, 20938, 20948, 20958, 20968, 20978, 2...endIds: List[Int] = List(39888, 39898, 39908, 39918, 39928, 39938, 39948, 39958, 39968, 39978, 39988, 39998, 40008, 40018, 40028, 40038, 40048, 40058, 40068, 40078, 40088, 40098, 40108, 40118, 40128, 40138, 40148, 40158, 40168, 40178, 40188, 40198, 40208, 40218, 40228, 40238, 40248, 40258, 40268, 40278, 40288, 40298, 40308, 40318, 40328, 40338, 40348, 40358, 40368, 40378, 40388, 40398, 40408, 40418, 40428, 40438, 40448, 40458, 40468, 40478, 40488, 40498, 40508, 40518, 40528, 40538, 40548, 40558, 40568, 40578, 40588, 40598, 40608, 40618, 40628, 40638, 40648, 40658, 40668, 40678, 40688, 40698, 40708, 40718, 40728, 40738, 40748, 40758, 40768, 40778, 40788, 40798, 40808, 40818, 40828, 40838, 40848, 40858, 40868, 40878, 40888, 40898, 40908, 40918, 40928, 40938, 40948, 40958, 40968, 40978, 40...windows: List[(Int, Int)] = List((19888,39888), (19898,39898), (19908,39908), (19918,39918), (19928,39928), (19938,39938), (19948,39948), (19958,39958), (19968,39968), (19978,39978), (19988,39988), (19998,39998), (20008,40008), (20018,40018), (20028,40028), (20038,40038), (20048,40048), (20058,40058), (20068,40068), (20078,40078), (20088,40088), (20098,40098), (20108,40108), (20118,40118), (20128,40128), (20138,40138), (20148,40148), (20158,40158), (20168,40168), (20178,40178), (20188,40188), (20198,40198), (20208,40208), (20218,40218), (20228,40228), (20238,40238), (20248,40248), (20258,40258), (20268,40268), (20278,40278), (20288,40288), (20298,40298), (20308,40308), (20318,40318), (20328,40328), (20338,40338), (20348,40348), (20358,40358), (20368,40368), (20378,40378), (20388,40388),..."},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-28T10:58:02-0200","dateFinished":"2016-11-28T10:58:05-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:100"},{"text":"val trainings = windows.map{case (lowerId, upperId) => dataCollected.filter(dataCollected(\"id\") >= lowerId && dataCollected(\"id\") < upperId)}\nval tests = windows.map{case (lowerId, upperId) => dataCollected.filter(dataCollected(\"id\") > upperId && dataCollected(\"id\") <= upperId + 100)}\n","dateUpdated":"2016-11-28T02:23:34-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480104289844_510238988","id":"20161125-180449_2140658399","result":{"code":"SUCCESS","type":"TEXT","msg":"trainings: List[org.apache.spark.sql.DataFrame] = List([id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: bigint], [id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, ...tests: List[org.apache.spark.sql.DataFrame] = List([id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: bigint], [id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: b..."},"dateCreated":"2016-11-25T06:04:49-0200","dateStarted":"2016-11-28T10:58:07-0200","dateFinished":"2016-11-28T10:58:12-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:101"},{"text":"val simpleTraining = dataCollected.filter(dataCollected(\"id\") >= 19888\n&& dataCollected(\"id\") < 39889 )\n\nval simpleTest = dataCollected.filter(dataCollected(\"id\") >= 39889 && dataCollected(\"id\") < 39989 )\nval simplePrediction = BinaryClassification().predict(simpleTraining.coalesce(1),simpleTest.coalesce(1),\nXGBoostAlgorithm, \"y\", \"id\", \n    Seq(\"age\", \"job\", \"marital\",\n\t\t\"education\", \"housing\", \"loan\", \"default\",\n\t\t\"duration\", \"campaign\", \"pdays\",\n\t\t\"previous\", \"empvarrate\",\n\t\t\"conspriceidx\", \"consconfidx\", \"euribor3m\", \"nremployed\"), 2000)","dateUpdated":"2016-11-29T06:16:54-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480339734222_187034243","id":"20161128-112854_557716016","result":{"code":"SUCCESS","type":"TEXT","msg":"\nsimpleTraining: org.apache.spark.sql.DataFrame = [id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: bigint]\n\nsimpleTest: org.apache.spark.sql.DataFrame = [id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: bigint]\n\nsimplePrediction: (org.apache.spark.sql.DataFrame, org.apache.spark.ml.PipelineModel) = ([id: float, features: vector, algorithm: string, prediction: float],pipeline_80521096c823)\n"},"dateCreated":"2016-11-28T11:28:54-0200","dateStarted":"2016-11-29T06:16:54-0200","dateFinished":"2016-11-29T06:17:50-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:102"},{"text":"val simplePredictionDf = simplePrediction._1\nval simpleTestDf = simpleTest.withColumnRenamed(\"id\",\"testId\").withColumnRenamed(\"y\",\"observado\")\nval simplePredictionData = simplePredictionDf.join(simpleTestDf, \nsimplePredictionDf(\"id\") === simpleTestDf(\"testId\"))\nuc.sql(\"drop table xgboost\")\n\nsimplePredictionData.saveAsTable(\"xgboost\")","dateUpdated":"2016-11-29T06:20:19-0200","config":{"colWidth":11,"graph":{"mode":"table","height":305,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480340005558_-973567131","id":"20161128-113325_103668502","result":{"code":"SUCCESS","type":"TEXT","msg":"\nsimplePredictionDf: org.apache.spark.sql.DataFrame = [id: float, features: vector, algorithm: string, prediction: float]\n\nsimpleTestDf: org.apache.spark.sql.DataFrame = [testId: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, observado: bigint]\n\nsimplePredictionData: org.apache.spark.sql.DataFrame = [id: float, features: vector, algorithm: string, prediction: float, testId: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, observado: bigint]\n\nres5: org.apache.spark.sql.DataFrame = []\n\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\n"},"dateCreated":"2016-11-28T11:33:25-0200","dateStarted":"2016-11-29T06:20:19-0200","dateFinished":"2016-11-29T06:20:31-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:103"},{"text":"simplePredictionData.count","dateUpdated":"2016-11-28T02:33:59-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480350537385_-755817416","id":"20161128-142857_1123414403","result":{"code":"ERROR","type":"TEXT","msg":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norg.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenAggregate(key=[], functions=[(count(1),mode=Final,isDistinct=false)], output=[count#1647L])\n+- TungstenExchange SinglePartition, None\n   +- TungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[count#1780L])\n      +- Project\n         +- BroadcastHashJoin [id#1337], [cast(testid#154L as float)], BuildRight\n            :- Sort [id#1337 ASC], true, 0\n            :  +- ConvertToUnsafe\n            :     +- Exchange rangepartitioning(id#1337 ASC,200), None\n            :        +- ConvertToSafe\n            :           +- InMemoryColumnarTableScan [id#1337], InMemoryRelation [id#1337,features#1338,algorithm#1339,prediction#1340], true, 10000, StorageLevel(true, true, false, true, 1), ConvertToUnsafe, None\n            +- Project [id#22L AS testId#154L]\n               +- Filter ((id#22L >= 39889) && (id#22L < 39989))\n                  +- InMemoryColumnarTableScan [id#22L], [(id#22L >= 39889),(id#22L < 39989)], InMemoryRelation [id#22L,age#23L,job#24,marital#25,education#26,default#27,housing#28,loan#29,contact#30,month#31,day_of_week#32,duration#33L,campaign#34L,pdays#35L,previous#36L,poutcome#37,empvarrate#38,conspriceidx#39,consconfidx#40,euribor3m#41,nremployed#42,y#43L], true, 10000, StorageLevel(true, true, false, true, 1), ConvertToUnsafe, None\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate.doExecute(TungstenAggregate.scala:80)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.SparkPlan.executeCollect(SparkPlan.scala:166)\n\tat org.apache.spark.sql.execution.SparkPlan.executeCollectPublic(SparkPlan.scala:174)\n\tat org.apache.spark.sql.DataFrame$$anonfun$org$apache$spark$sql$DataFrame$$execute$1$1.apply(DataFrame.scala:1499)\n\tat org.apache.spark.sql.DataFrame$$anonfun$org$apache$spark$sql$DataFrame$$execute$1$1.apply(DataFrame.scala:1499)\n\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:56)\n\tat org.apache.spark.sql.DataFrame.withNewExecutionId(DataFrame.scala:2086)\n\tat org.apache.spark.sql.DataFrame.org$apache$spark$sql$DataFrame$$execute$1(DataFrame.scala:1498)\n\tat org.apache.spark.sql.DataFrame.org$apache$spark$sql$DataFrame$$collect(DataFrame.scala:1505)\n\tat org.apache.spark.sql.DataFrame$$anonfun$count$1.apply(DataFrame.scala:1515)\n\tat org.apache.spark.sql.DataFrame$$anonfun$count$1.apply(DataFrame.scala:1514)\n\tat org.apache.spark.sql.DataFrame.withCallback(DataFrame.scala:2099)\n\tat org.apache.spark.sql.DataFrame.count(DataFrame.scala:1514)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:49)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:54)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:56)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:58)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:60)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:62)\n\tat $iwC$$iwC$$iwC$$iwC.<init>(<console>:64)\n\tat $iwC$$iwC$$iwC.<init>(<console>:66)\n\tat $iwC$$iwC.<init>(<console>:68)\n\tat $iwC.<init>(<console>:70)\n\tat <init>(<console>:72)\n\tat .<init>(<console>:76)\n\tat .<clinit>(<console>)\n\tat .<init>(<console>:7)\n\tat .<clinit>(<console>)\n\tat $print(<console>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1346)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat org.apache.zeppelin.spark.IUberSparkInterpreter.interpretInput(IUberSparkInterpreter.java:800)\n\tat org.apache.zeppelin.spark.IUberSparkInterpreter.interpret(IUberSparkInterpreter.java:770)\n\tat org.apache.zeppelin.spark.IUberSparkInterpreter.interpret(IUberSparkInterpreter.java:758)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:341)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:176)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenExchange SinglePartition, None\n+- TungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[count#1780L])\n   +- Project\n      +- BroadcastHashJoin [id#1337], [cast(testid#154L as float)], BuildRight\n         :- Sort [id#1337 ASC], true, 0\n         :  +- ConvertToUnsafe\n         :     +- Exchange rangepartitioning(id#1337 ASC,200), None\n         :        +- ConvertToSafe\n         :           +- InMemoryColumnarTableScan [id#1337], InMemoryRelation [id#1337,features#1338,algorithm#1339,prediction#1340], true, 10000, StorageLevel(true, true, false, true, 1), ConvertToUnsafe, None\n         +- Project [id#22L AS testId#154L]\n            +- Filter ((id#22L >= 39889) && (id#22L < 39989))\n               +- InMemoryColumnarTableScan [id#22L], [(id#22L >= 39889),(id#22L < 39989)], InMemoryRelation [id#22L,age#23L,job#24,marital#25,education#26,default#27,housing#28,loan#29,contact#30,month#31,day_of_week#32,duration#33L,campaign#34L,pdays#35L,previous#36L,poutcome#37,empvarrate#38,conspriceidx#39,consconfidx#40,euribor3m#41,nremployed#42,y#43L], true, 10000, StorageLevel(true, true, false, true, 1), ConvertToUnsafe, None\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.Exchange.doExecute(Exchange.scala:247)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:86)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:80)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 56 more\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nTungstenAggregate(key=[], functions=[(count(1),mode=Partial,isDistinct=false)], output=[count#1780L])\n+- Project\n   +- BroadcastHashJoin [id#1337], [cast(testid#154L as float)], BuildRight\n      :- Sort [id#1337 ASC], true, 0\n      :  +- ConvertToUnsafe\n      :     +- Exchange rangepartitioning(id#1337 ASC,200), None\n      :        +- ConvertToSafe\n      :           +- InMemoryColumnarTableScan [id#1337], InMemoryRelation [id#1337,features#1338,algorithm#1339,prediction#1340], true, 10000, StorageLevel(true\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n, true, false, true, 1), ConvertToUnsafe, None\n      +- Project [id#22L AS testId#154L]\n         +- Filter ((id#22L >= 39889) && (id#22L < 39989))\n            +- InMemoryColumnarTableScan [id#22L], [(id#22L >= 39889),(id#22L < 39989)], InMemoryRelation [id#22L,age#23L,job#24,marital#25,education#26,default#27,housing#28,loan#29,contact#30,month#31,day_of_week#32,duration#33L,campaign#34L,pdays#35L,previous#36L,poutcome#37,empvarrate#38,conspriceidx#39,consconfidx#40,euribor3m#41,nremployed#42,y#43L], true, 10000, StorageLevel(true, true, false, true, 1), ConvertToUnsafe, None\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate.doExecute(TungstenAggregate.scala:80)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.Exchange.prepareShuffleDependency(Exchange.scala:164)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:254)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:248)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 64 more\nCaused by: org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange rangepartitioning(id#1337 ASC,200), None\n+- ConvertToSafe\n   +- InMemoryColumnarTableScan [id#1337], InMemoryRelation [id#1337,features#1338,algorithm#1339,prediction#1340], true, 10000, StorageLevel(true, true, false, true, 1), ConvertToUnsafe, None\n\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:49)\n\tat org.apache.spark.sql.execution.Exchange.doExecute(Exchange.scala:247)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.ConvertToUnsafe.doExecute(rowFormatConverters.scala:38)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.Sort.doExecute(Sort.scala:64)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.joins.BroadcastHashJoin.doExecute(BroadcastHashJoin.scala:109)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.Project.doExecute(basicOperators.scala:46)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:86)\n\tat org.apache.spark.sql.execution.aggregate.TungstenAggregate$$anonfun$doExecute$1.apply(TungstenAggregate.scala:80)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 73 more\nCaused by: org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 27.0 failed 1 times, most recent failure: Lost task 0.0 in stage 27.0 (TID 28, localhost): java.lang.IllegalArgumentException: Field \"id\" does not exist.\n\tat org.apache.spark.sql.types.StructType$$anonfun$fieldIndex$1.apply(StructType.scala:234)\n\tat org.apache.spark.sql.types.StructType$$anonfun$fieldIndex$1.apply(StructType.scala:234)\n\tat scala.collection.MapLike$class.getOrElse(MapLike.scala:128)\n\tat scala.collection.AbstractMap.getOrElse(Map.scala:58)\n\tat org.apache.spark.sql.types.StructType.fieldIndex(StructType.scala:233)\n\tat org.apache.spark.sql.catalyst.expressions.GenericRowWithSchema.fieldIndex(rows.scala:213)\n\tat org.apache.spark.sql.Row$class.getAs(Row.scala:336)\n\tat org.apache.spark.sql.catalyst.expressions.GenericRow.getAs(rows.scala:192)\n\tat org.apache.spark.ml.XGBoostBigModel$$anonfun$1.apply(XGBoostBigModel.scala:52)\n\tat org.apache.spark.ml.XGBoostBigModel$$anonfun$1.apply(XGBoostBigModel.scala:51)\n\tat scala.collection.Iterator$$anon$11.next(Iterator.scala:328)\n\tat org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:149)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:73)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:89)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:214)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat scala.Option.foreach(Option.scala:236)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1832)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1845)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1858)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1929)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:927)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:316)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:926)\n\tat org.apache.spark.RangePartitioner$.sketch(Partitioner.scala:264)\n\tat org.apache.spark.RangePartitioner.<init>(Partitioner.scala:126)\n\tat org.apache.spark.sql.execution.Exchange.prepareShuffleDependency(Exchang\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ne.scala:179)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:254)\n\tat org.apache.spark.sql.execution.Exchange$$anonfun$doExecute$1.apply(Exchange.scala:248)\n\tat org.apache.spark.sql.catalyst.errors.package$.attachTree(package.scala:48)\n\t... 101 more\nCaused by: java.lang.IllegalArgumentException: Field \"id\" does not exist.\n\tat org.apache.spark.sql.types.StructType$$anonfun$fieldIndex$1.apply(StructType.scala:234)\n\tat org.apache.spark.sql.types.StructType$$anonfun$fieldIndex$1.apply(StructType.scala:234)\n\tat scala.collection.MapLike$class.getOrElse(MapLike.scala:128)\n\tat scala.collection.AbstractMap.getOrElse(Map.scala:58)\n\tat org.apache.spark.sql.types.StructType.fieldIndex(StructType.scala:233)\n\tat org.apache.spark.sql.catalyst.expressions.GenericRowWithSchema.fieldIndex(rows.scala:213)\n\tat org.apache.spark.sql.Row$class.getAs(Row.scala:336)\n\tat org.apache.spark.sql.catalyst.expressions.GenericRow.getAs(rows.scala:192)\n\tat org.apache.spark.ml.XGBoostBigModel$$anonfun$1.apply(XGBoostBigModel.scala:52)\n\tat org.apache.spark.ml.XGBoostBigModel$$anonfun$1.apply(XGBoostBigModel.scala:51)\n\tat scala.collection.Iterator$$anon$11.next(Iterator.scala:328)\n\tat org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:149)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:73)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:41)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:89)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:214)\n\t... 3 more\n\n"},"dateCreated":"2016-11-28T02:28:57-0200","dateStarted":"2016-11-28T02:29:06-0200","dateFinished":"2016-11-28T02:29:08-0200","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:104"},{"text":"val data = trainings.zip(tests)\n// val (train, test) = trainings.zip(tests).last\nval predictionsAndModelsWindow = \n data.map{\n     case(train,test) =>\n    BinaryClassification().predict(train.coalesce(1),test.coalesce(1),XGBoostAlgorithm, \"y\", \"id\", \n    Seq(\"age\", \"job\", \"marital\",\n\t\t\"education\", \"housing\", \"loan\", \"default\",\n\t\t\"duration\", \"campaign\", \"pdays\",\n\t\t\"previous\", \"empvarrate\",\n\t\t\"conspriceidx\", \"consconfidx\", \"euribor3m\", \"nremployed\"), 2000)\n\n }","dateUpdated":"2016-11-28T02:23:51-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480105115372_1812766136","id":"20161125-181835_844814253","result":{"code":"SUCCESS","type":"TEXT","msg":"data: List[(org.apache.spark.sql.DataFrame, org.apache.spark.sql.DataFrame)] = List(([id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: bigint],[id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m:...predictionsAndModelsWindow: List[(org.apache.spark.sql.DataFrame, org.apache.spark.ml.PipelineModel)] = List(([id: float, features: vector, algorithm: string, prediction: float],pipeline_f725766f2595), ([id: float, features: vector, algorithm: string, prediction: float],pipeline_a16570e716a9), ([id: float, features: vector, algorithm: string, prediction: float],pipeline_2d625be2ff6e), ([id: float, features: vector, algorithm: string, prediction: float],pipeline_c5875206acc0), ([id: float, features: vector, algorithm: string, prediction: float],pipeline_b1baf3e1e6b5), ([id: float, features: vector, algorithm: string, prediction: float],pipeline_74077d2bed6e), ([id: float, features: vector, algorithm: string, prediction: float],pipeline_7bf02c7903dd), ([id: float, features: vector, algori..."},"dateCreated":"2016-11-25T06:18:35-0200","dateStarted":"2016-11-27T01:20:46-0200","dateFinished":"2016-11-27T02:58:24-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:105"},{"text":"val predictions = predictionsAndModelsWindow.map(_._1)\nval testColumn = tests.map(_.select(\"id\",(\"y\")))\nval predictionColumn = predictions.map(_.select(\"id\",\"prediction\"))\nval joinedData = predictionColumn.zip(testColumn).map{\n    case(selectedPredictions, selectedTest) => selectedTest.join(selectedPredictions, selectedTest(\"id\") === selectedPredictions(\"id\"))\n}\nval dataConfrontation = joinedData.map{_.map(row => (row.getLong(0), row.getLong(1), row.getFloat(3)))}","dateUpdated":"2016-11-28T02:23:56-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480266443998_-1937298172","id":"20161127-150723_1362793255","result":{"code":"SUCCESS","type":"TEXT","msg":"predictions: List[org.apache.spark.sql.DataFrame] = List([id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, prediction: float], [id: float, features: vector, algorithm: string, p...testColumn: List[org.apache.spark.sql.DataFrame] = List([id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: bigint], [id: bigint, y: ...predictionColumn: List[org.apache.spark.sql.DataFrame] = List([id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float], [id: float, prediction: float],...joinedData: List[org.apache.spark.sql.DataFrame] = List([id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id: float, prediction: float], [id: bigint, y: bigint, id...dataConfrontation: List[org.apache.spark.rdd.RDD[(Long, Long, Float)]] = List(MapPartitionsRDD[16166] at map at <console>:83, MapPartitionsRDD[16181] at map at <console>:83, MapPartitionsRDD[16196] at map at <console>:83, MapPartitionsRDD[16211] at map at <console>:83, MapPartitionsRDD[16226] at map at <console>:83, MapPartitionsRDD[16241] at map at <console>:83, MapPartitionsRDD[16256] at map at <console>:83, MapPartitionsRDD[16271] at map at <console>:83, MapPartitionsRDD[16286] at map at <console>:83, MapPartitionsRDD[16301] at map at <console>:83, MapPartitionsRDD[16316] at map at <console>:83, MapPartitionsRDD[16331] at map at <console>:83, MapPartitionsRDD[16346] at map at <console>:83, MapPartitionsRDD[16361] at map at <console>:83, MapPartitionsRDD[16376] at map at <console>:83,..."},"dateCreated":"2016-11-27T03:07:23-0200","dateStarted":"2016-11-27T05:28:27-0200","dateFinished":"2016-11-27T05:30:41-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:106"},{"text":"val predictionData = dataConfrontation.reduceLeft( (left, right) => left.union(right))\nval xgBoostResult = joinedData.reduceLeft((left, right) => left.unionAll(right))","dateUpdated":"2016-11-28T02:24:03-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480271912592_1603461407","id":"20161127-163832_54039882","result":{"code":"SUCCESS","type":"TEXT","msg":"\npredictionData: org.apache.spark.rdd.RDD[(Long, Long, Float)] = UnionRDD[18359] at union at <console>:85\n\nxgBoostResult: org.apache.spark.sql.DataFrame = [id: bigint, y: bigint, id: float, prediction: float]\n"},"dateCreated":"2016-11-27T04:38:32-0200","dateStarted":"2016-11-27T05:34:24-0200","dateFinished":"2016-11-27T05:34:37-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:107"},{"text":"val context= uc.sqlContext\nimport context.implicits._\nuc.sql(\"drop table comparison\")\nuc.sql(\"drop table predictionsXgboost\")\npredictionData.toDF(\"id\",\"observado\",\"prediction\").saveAsTable(\"comparison\")\nxgBoostResult.saveAsTable(\"predictionsXgboost\")","dateUpdated":"2016-11-28T02:42:49-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","tableHide":true,"editorHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480272873701_-436662272","id":"20161127-165433_1781767318","result":{"code":"ERROR","type":"TEXT","msg":"\ncontext: org.apache.spark.sql.hive.HiveContext = org.apache.spark.sql.hive.HiveContext@4644f903\n\nimport context.implicits._\n\nwarning: there were 1 deprecation warning(s); re-run with -deprecation for details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\norg.apache.spark.sql.AnalysisException: Duplicate column(s) : \"id\" found, cannot save to parquet format;\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetRelation.checkConstraints(ParquetRelation.scala:196)\n\tat org.apache.spark.sql.execution.datasources.parquet.ParquetRelation.dataSchema(ParquetRelation.scala:205)\n\tat org.apache.spark.sql.sources.HadoopFsRelation.schema$lzycompute(interfaces.scala:636)\n\tat org.apache.spark.sql.sources.HadoopFsRelation.schema(interfaces.scala:635)\n\tat org.apache.spark.sql.execution.datasources.InsertIntoHadoopFsRelation.run(InsertIntoHadoopFsRelation.scala:105)\n\tat org.apache.spark.sql.execution.ExecutedCommand.sideEffectResult$lzycompute(commands.scala:58)\n\tat org.apache.spark.sql.execution.ExecutedCommand.sideEffectResult(commands.scala:56)\n\tat org.apache.spark.sql.execution.ExecutedCommand.doExecute(commands.scala:70)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd$lzycompute(QueryExecution.scala:55)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd(QueryExecution.scala:55)\n\tat org.apache.spark.sql.execution.datasources.ResolvedDataSource$.apply(ResolvedDataSource.scala:256)\n\tat org.apache.spark.sql.hive.execution.CreateMetastoreDataSourceAsSelect.run(commands.scala:274)\n\tat org.apache.spark.sql.execution.ExecutedCommand.sideEffectResult$lzycompute(commands.scala:58)\n\tat org.apache.spark.sql.execution.ExecutedCommand.sideEffectResult(commands.scala:56)\n\tat org.apache.spark.sql.execution.ExecutedCommand.doExecute(commands.scala:70)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:132)\n\tat org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$5.apply(SparkPlan.scala:130)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:130)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd$lzycompute(QueryExecution.scala:55)\n\tat org.apache.spark.sql.execution.QueryExecution.toRdd(QueryExecution.scala:55)\n\tat org.apache.spark.sql.DataFrameWriter.saveAsTable(DataFrameWriter.scala:251)\n\tat org.apache.spark.sql.DataFrameWriter.saveAsTable(DataFrameWriter.scala:221)\n\tat org.apache.spark.sql.DataFrame.saveAsTable(DataFrame.scala:1823)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:92)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:97)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:99)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:101)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:103)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:105)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:107)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:109)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:111)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:113)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:115)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:117)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:119)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:121)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:123)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:125)\n\tat $iwC$$iwC$$iwC$$iwC$$iwC.<init>(<console>:127)\n\tat $iwC$$iwC$$iwC$$iwC.<init>(<console>:129)\n\tat $iwC$$iwC$$iwC.<init>(<console>:131)\n\tat $iwC$$iwC.<init>(<console>:133)\n\tat $iwC.<init>(<console>:135)\n\tat <init>(<console>:137)\n\tat .<init>(<console>:141)\n\tat .<clinit>(<console>)\n\tat .<init>(<console>:7)\n\tat .<clinit>(<console>)\n\tat $print(<console>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.spark.repl.SparkIMain$ReadEvalPrint.call(SparkIMain.scala:1065)\n\tat org.apache.spark.repl.SparkIMain$Request.loadAndRun(SparkIMain.scala:1346)\n\tat org.apache.spark.repl.SparkIMain.loadAndRunReq$1(SparkIMain.scala:840)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:871)\n\tat org.apache.spark.repl.SparkIMain.interpret(SparkIMain.scala:819)\n\tat org.apache.zeppelin.spark.IUberSparkInterpreter.interpretInput(IUberSparkInterpreter.java:800)\n\tat org.apache.zeppelin.spark.IUberSparkInterpreter.interpret(IUberSparkInterpreter.java:770)\n\tat org.apache.zeppelin.spark.IUberSparkInterpreter.interpret(IUberSparkInterpreter.java:758)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.interpret(LazyOpenInterpreter.java:94)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer$InterpretJob.jobRun(RemoteInterpreterServer.java:341)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:176)\n\tat org.apache.zeppelin.scheduler.FIFOScheduler$1.run(FIFOScheduler.java:139)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n"},"dateCreated":"2016-11-27T04:54:33-0200","dateStarted":"2016-11-27T05:35:07-0200","dateFinished":"2016-11-27T05:37:15-0200","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:108"},{"text":"val upperPredictedId = predictions.select(\"id\").rdd.map(_.getFloat(0)).max()\nval lowerPredictedId = predictions.select(\"id\").rdd.map(_.getFloat(0)).min()","dateUpdated":"2016-11-28T02:25:05-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480182057605_-1254861956","id":"20161126-154057_1845216626","result":{"code":"SUCCESS","type":"TEXT","msg":"\nupperPredictedId: Float = 41187.0\n\nlowerPredictedId: Float = 41179.0\n"},"dateCreated":"2016-11-26T03:40:57-0200","dateStarted":"2016-11-26T05:08:22-0200","dateFinished":"2016-11-26T05:08:24-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:109"},{"text":"val toTest = dataCollected.filter(dataCollected(\"id\") >= lowerPredictedId && dataCollected(\"id\") <= upperPredictedId)","dateUpdated":"2016-11-28T02:25:03-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480187249359_-1973290333","id":"20161126-170729_1439691651","result":{"code":"SUCCESS","type":"TEXT","msg":"\ntoTest: org.apache.spark.sql.DataFrame = [id: bigint, age: bigint, job: string, marital: string, education: string, default: string, housing: string, loan: string, contact: string, month: string, day_of_week: string, duration: bigint, campaign: bigint, pdays: bigint, previous: bigint, poutcome: string, empvarrate: double, conspriceidx: double, consconfidx: double, euribor3m: double, nremployed: double, y: bigint]\n"},"dateCreated":"2016-11-26T05:07:29-0200","dateStarted":"2016-11-26T05:08:57-0200","dateFinished":"2016-11-26T05:08:58-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:110"},{"text":"val selectedPredictions = predictions.select(\"id\",\"prediction\")\nval selectedTest = toTest.select(\"id\",\"y\")\nselectedTest.join(selectedPredictions, selectedTest(\"id\") === selectedPredictions(\"id\")).map(row => (row.getLong(0), row.get(1), row.get(3))).collect","dateUpdated":"2016-11-28T02:24:59-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480187321499_-328965479","id":"20161126-170841_41924413","result":{"code":"SUCCESS","type":"TEXT","msg":"\nselectedPredictions: org.apache.spark.sql.DataFrame = [id: float, prediction: float]\n\nselectedTest: org.apache.spark.sql.DataFrame = [id: bigint, y: bigint]\n\nres47: Array[(Long, Any, Any)] = Array((41179,0,0.05040065), (41180,1,0.8066035), (41181,0,0.15639004), (41182,0,0.516328), (41183,1,0.67357093), (41184,0,0.071650475), (41185,1,0.6785876), (41186,0,0.668106), (41187,0,0.29565516))\n"},"dateCreated":"2016-11-26T05:08:41-0200","dateStarted":"2016-11-26T05:38:30-0200","dateFinished":"2016-11-26T05:38:32-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:111"},{"text":"toTest.registerTempTable(\"test\")\nuc.sql(\"select y, count(0) from test group by y\").collect","dateUpdated":"2016-11-28T02:24:47-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","editorHide":true,"tableHide":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480188467037_-1857520308","id":"20161126-172747_992230086","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres33: Array[org.apache.spark.sql.Row] = Array([0,6], [1,3])\n"},"dateCreated":"2016-11-26T05:27:47-0200","dateStarted":"2016-11-26T05:28:39-0200","dateFinished":"2016-11-26T05:28:48-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:112"},{"text":"val predictionsXgboost = uc.sql(\"\"\"SELECT * FROM xgboost\"\"\").na.drop.cache.\nselect(\"observado\",\"prediction\")","dateUpdated":"2016-11-29T06:20:46-0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183438_146648210","id":"20160719-185043_737831866","result":{"code":"SUCCESS","type":"TEXT","msg":"\npredictionsXgboost: org.apache.spark.sql.DataFrame = [observado: bigint, prediction: float]\n"},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-29T06:20:46-0200","dateFinished":"2016-11-29T06:20:48-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:113"},{"text":"val comparison = predictionsXgboost.rdd.map{case Row(observado: Long, pred: Float) =>\n(observado, pred)}.sortBy(_._2, false)\n.zipWithIndex.map{case((observado: Long, pred: Float), index:Long)=> Row(index, observado.toDouble, pred.toDouble)}\nval comparisonDF = uc.sqlContext.createDataFrame(comparison,StructType(Array(StructField(\"index\",LongType),StructField(\"observado\",DoubleType),StructField(\"prediction\",DoubleType))))\n","dateUpdated":"2016-11-29T06:20:53-0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183439_146263461","id":"20160719-185703_511032746","result":{"code":"SUCCESS","type":"TEXT","msg":"\ncomparison: org.apache.spark.rdd.RDD[org.apache.spark.sql.Row] = MapPartitionsRDD[137] at map at <console>:40\n\ncomparisonDF: org.apache.spark.sql.DataFrame = [index: bigint, observado: double, prediction: double]\n"},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-29T06:20:53-0200","dateFinished":"2016-11-29T06:21:14-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:114"},{"text":"comparisonDF.filter(comparisonDF(\"observado\") === 1).count","dateUpdated":"2016-11-29T04:06:42-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480442781388_-643814210","id":"20161129-160621_305404013","result":{"code":"SUCCESS","type":"TEXT","msg":"\nres8: Long = 43\n"},"dateCreated":"2016-11-29T04:06:21-0200","dateStarted":"2016-11-29T04:06:42-0200","dateFinished":"2016-11-29T04:06:47-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:115"},{"text":"comparisonDF.registerTempTable(\"comparison\")","dateUpdated":"2016-11-29T06:21:08-0200","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183439_146263461","id":"20160719-190622_58554845","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-29T06:21:08-0200","dateFinished":"2016-11-29T06:21:15-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:116"},{"title":"Adesão de Clientes em função do número de clientes contatados","text":"%sql select index as sample_size, soma/43 as responses, prediction from (select index, observado, prediction, sum(observado) OVER(ORDER BY prediction desc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS soma from comparison order by prediction desc) newtable order by prediction desc","dateUpdated":"2016-11-29T06:21:24-0200","config":{"colWidth":12,"editorMode":"ace/mode/sql","title":true,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"sample_size","index":0,"aggr":"sum"}],"values":[{"name":"responses","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"sample_size","index":0,"aggr":"sum"},"yAxis":{"name":"responses","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480081183439_146263461","id":"20160719-190832_910166709","result":{"code":"SUCCESS","type":"TABLE","msg":"sample_size\tresponses\tprediction\n0\t0.023255813953488372\t0.924351692199707\n1\t0.046511627906976744\t0.9129927754402161\n2\t0.06976744186046512\t0.9125118255615234\n3\t0.06976744186046512\t0.9093866348266602\n4\t0.06976744186046512\t0.9062002897262573\n5\t0.09302325581395349\t0.9000930786132812\n6\t0.11627906976744186\t0.8891617655754089\n7\t0.13953488372093023\t0.887304425239563\n8\t0.16279069767441862\t0.8799930214881897\n9\t0.18604651162790697\t0.8797863721847534\n10\t0.20930232558139536\t0.8704000115394592\n11\t0.23255813953488372\t0.8675511479377747\n12\t0.2558139534883721\t0.8658813834190369\n13\t0.27906976744186046\t0.8627766966819763\n14\t0.3023255813953488\t0.8602023124694824\n15\t0.32558139534883723\t0.8596631288528442\n16\t0.3488372093023256\t0.8583450317382812\n17\t0.37209302325581395\t0.8230068683624268\n18\t0.3953488372093023\t0.81925368309021\n19\t0.4186046511627907\t0.8155286908149719\n20\t0.4418604651162791\t0.8151432871818542\n21\t0.46511627906976744\t0.8097782731056213\n22\t0.4883720930232558\t0.8068200349807739\n23\t0.5116279069767442\t0.7987463474273682\n24\t0.5116279069767442\t0.7819666266441345\n25\t0.5116279069767442\t0.7755333781242371\n26\t0.5348837209302325\t0.7658251523971558\n27\t0.5581395348837209\t0.7554816603660583\n28\t0.5813953488372093\t0.7544440031051636\n29\t0.5813953488372093\t0.7524316906929016\n30\t0.5813953488372093\t0.7511333227157593\n31\t0.5813953488372093\t0.7448474764823914\n32\t0.6046511627906976\t0.7427705526351929\n33\t0.6046511627906976\t0.7372673749923706\n34\t0.627906976744186\t0.7261765003204346\n35\t0.6511627906976745\t0.7177703380584717\n36\t0.6744186046511628\t0.7169880867004395\n37\t0.6976744186046512\t0.7146859765052795\n38\t0.6976744186046512\t0.7144321203231812\n39\t0.7209302325581395\t0.7126651406288147\n40\t0.7441860465116279\t0.7058287262916565\n41\t0.7441860465116279\t0.7052389979362488\n42\t0.7674418604651163\t0.6861873865127563\n43\t0.7674418604651163\t0.6774204969406128\n44\t0.7674418604651163\t0.6480202078819275\n45\t0.7906976744186046\t0.6305401921272278\n46\t0.813953488372093\t0.6221232414245605\n47\t0.8372093023255814\t0.6097898483276367\n48\t0.8604651162790697\t0.5949468016624451\n49\t0.8604651162790697\t0.5914656519889832\n50\t0.8604651162790697\t0.5621809363365173\n51\t0.8837209302325582\t0.5612388253211975\n52\t0.9069767441860465\t0.5356816053390503\n53\t0.9069767441860465\t0.5218115448951721\n54\t0.9069767441860465\t0.5150982737541199\n55\t0.9069767441860465\t0.5114401578903198\n56\t0.9069767441860465\t0.5099711418151855\n57\t0.9069767441860465\t0.5058027505874634\n58\t0.9302325581395349\t0.5048250555992126\n59\t0.9302325581395349\t0.5016961097717285\n60\t0.9302325581395349\t0.4923882484436035\n61\t0.9534883720930233\t0.4670853316783905\n62\t0.9534883720930233\t0.4645720422267914\n63\t0.9534883720930233\t0.4418201744556427\n64\t0.9534883720930233\t0.4240017235279083\n65\t0.9767441860465116\t0.42266637086868286\n66\t0.9767441860465116\t0.4156034290790558\n67\t0.9767441860465116\t0.41468876600265503\n68\t0.9767441860465116\t0.4047994613647461\n69\t1.0\t0.4030766785144806\n70\t1.0\t0.40238282084465027\n71\t1.0\t0.39361485838890076\n72\t1.0\t0.3854232132434845\n73\t1.0\t0.3780963122844696\n74\t1.0\t0.35947659611701965\n75\t1.0\t0.34985068440437317\n76\t1.0\t0.3424440920352936\n77\t1.0\t0.33142006397247314\n78\t1.0\t0.3167422115802765\n79\t1.0\t0.30903032422065735\n80\t1.0\t0.29447099566459656\n81\t1.0\t0.2922643721103668\n82\t1.0\t0.2906268239021301\n83\t1.0\t0.2606949210166931\n84\t1.0\t0.23659643530845642\n85\t1.0\t0.20980115234851837\n86\t1.0\t0.19088388979434967\n87\t1.0\t0.18653739988803864\n88\t1.0\t0.14950573444366455\n89\t1.0\t0.13690268993377686\n90\t1.0\t0.06328210234642029\n91\t1.0\t0.0314619205892086\n92\t1.0\t0.016740668565034866\n93\t1.0\t0.016667891293764114\n94\t1.0\t0.016526099294424057\n95\t1.0\t0.015795854851603508\n96\t1.0\t0.015559518709778786\n97\t1.0\t0.014686117880046368\n98\t1.0\t0.008753995411098003\n99\t1.0\t0.007522683124989271\n","comment":"","msgTable":[[{"key":"responses","value":"0"},{"key":"responses","value":"0.023255813953488372"},{"key":"responses","value":"0.924351692199707"}],[{"key":"prediction","value":"1"},{"key":"prediction","value":"0.046511627906976744"},{"key":"prediction","value":"0.9129927754402161"}],[{"value":"2"},{"value":"0.06976744186046512"},{"value":"0.9125118255615234"}],[{"value":"3"},{"value":"0.06976744186046512"},{"value":"0.9093866348266602"}],[{"value":"4"},{"value":"0.06976744186046512"},{"value":"0.9062002897262573"}],[{"value":"5"},{"value":"0.09302325581395349"},{"value":"0.9000930786132812"}],[{"value":"6"},{"value":"0.11627906976744186"},{"value":"0.8891617655754089"}],[{"value":"7"},{"value":"0.13953488372093023"},{"value":"0.887304425239563"}],[{"value":"8"},{"value":"0.16279069767441862"},{"value":"0.8799930214881897"}],[{"value":"9"},{"value":"0.18604651162790697"},{"value":"0.8797863721847534"}],[{"value":"10"},{"value":"0.20930232558139536"},{"value":"0.8704000115394592"}],[{"value":"11"},{"value":"0.23255813953488372"},{"value":"0.8675511479377747"}],[{"value":"12"},{"value":"0.2558139534883721"},{"value":"0.8658813834190369"}],[{"value":"13"},{"value":"0.27906976744186046"},{"value":"0.8627766966819763"}],[{"value":"14"},{"value":"0.3023255813953488"},{"value":"0.8602023124694824"}],[{"value":"15"},{"value":"0.32558139534883723"},{"value":"0.8596631288528442"}],[{"value":"16"},{"value":"0.3488372093023256"},{"value":"0.8583450317382812"}],[{"value":"17"},{"value":"0.37209302325581395"},{"value":"0.8230068683624268"}],[{"value":"18"},{"value":"0.3953488372093023"},{"value":"0.81925368309021"}],[{"value":"19"},{"value":"0.4186046511627907"},{"value":"0.8155286908149719"}],[{"value":"20"},{"value":"0.4418604651162791"},{"value":"0.8151432871818542"}],[{"value":"21"},{"value":"0.46511627906976744"},{"value":"0.8097782731056213"}],[{"value":"22"},{"value":"0.4883720930232558"},{"value":"0.8068200349807739"}],[{"value":"23"},{"value":"0.5116279069767442"},{"value":"0.7987463474273682"}],[{"value":"24"},{"value":"0.5116279069767442"},{"value":"0.7819666266441345"}],[{"value":"25"},{"value":"0.5116279069767442"},{"value":"0.7755333781242371"}],[{"value":"26"},{"value":"0.5348837209302325"},{"value":"0.7658251523971558"}],[{"value":"27"},{"value":"0.5581395348837209"},{"value":"0.7554816603660583"}],[{"value":"28"},{"value":"0.5813953488372093"},{"value":"0.7544440031051636"}],[{"value":"29"},{"value":"0.5813953488372093"},{"value":"0.7524316906929016"}],[{"value":"30"},{"value":"0.5813953488372093"},{"value":"0.7511333227157593"}],[{"value":"31"},{"value":"0.5813953488372093"},{"value":"0.7448474764823914"}],[{"value":"32"},{"value":"0.6046511627906976"},{"value":"0.7427705526351929"}],[{"value":"33"},{"value":"0.6046511627906976"},{"value":"0.7372673749923706"}],[{"value":"34"},{"value":"0.627906976744186"},{"value":"0.7261765003204346"}],[{"value":"35"},{"value":"0.6511627906976745"},{"value":"0.7177703380584717"}],[{"value":"36"},{"value":"0.6744186046511628"},{"value":"0.7169880867004395"}],[{"value":"37"},{"value":"0.6976744186046512"},{"value":"0.7146859765052795"}],[{"value":"38"},{"value":"0.6976744186046512"},{"value":"0.7144321203231812"}],[{"value":"39"},{"value":"0.7209302325581395"},{"value":"0.7126651406288147"}],[{"value":"40"},{"value":"0.7441860465116279"},{"value":"0.7058287262916565"}],[{"value":"41"},{"value":"0.7441860465116279"},{"value":"0.7052389979362488"}],[{"value":"42"},{"value":"0.7674418604651163"},{"value":"0.6861873865127563"}],[{"value":"43"},{"value":"0.7674418604651163"},{"value":"0.6774204969406128"}],[{"value":"44"},{"value":"0.7674418604651163"},{"value":"0.6480202078819275"}],[{"value":"45"},{"value":"0.7906976744186046"},{"value":"0.6305401921272278"}],[{"value":"46"},{"value":"0.813953488372093"},{"value":"0.6221232414245605"}],[{"value":"47"},{"value":"0.8372093023255814"},{"value":"0.6097898483276367"}],[{"value":"48"},{"value":"0.8604651162790697"},{"value":"0.5949468016624451"}],[{"value":"49"},{"value":"0.8604651162790697"},{"value":"0.5914656519889832"}],[{"value":"50"},{"value":"0.8604651162790697"},{"value":"0.5621809363365173"}],[{"value":"51"},{"value":"0.8837209302325582"},{"value":"0.5612388253211975"}],[{"value":"52"},{"value":"0.9069767441860465"},{"value":"0.5356816053390503"}],[{"value":"53"},{"value":"0.9069767441860465"},{"value":"0.5218115448951721"}],[{"value":"54"},{"value":"0.9069767441860465"},{"value":"0.5150982737541199"}],[{"value":"55"},{"value":"0.9069767441860465"},{"value":"0.5114401578903198"}],[{"value":"56"},{"value":"0.9069767441860465"},{"value":"0.5099711418151855"}],[{"value":"57"},{"value":"0.9069767441860465"},{"value":"0.5058027505874634"}],[{"value":"58"},{"value":"0.9302325581395349"},{"value":"0.5048250555992126"}],[{"value":"59"},{"value":"0.9302325581395349"},{"value":"0.5016961097717285"}],[{"value":"60"},{"value":"0.9302325581395349"},{"value":"0.4923882484436035"}],[{"value":"61"},{"value":"0.9534883720930233"},{"value":"0.4670853316783905"}],[{"value":"62"},{"value":"0.9534883720930233"},{"value":"0.4645720422267914"}],[{"value":"63"},{"value":"0.9534883720930233"},{"value":"0.4418201744556427"}],[{"value":"64"},{"value":"0.9534883720930233"},{"value":"0.4240017235279083"}],[{"value":"65"},{"value":"0.9767441860465116"},{"value":"0.42266637086868286"}],[{"value":"66"},{"value":"0.9767441860465116"},{"value":"0.4156034290790558"}],[{"value":"67"},{"value":"0.9767441860465116"},{"value":"0.41468876600265503"}],[{"value":"68"},{"value":"0.9767441860465116"},{"value":"0.4047994613647461"}],[{"value":"69"},{"value":"1.0"},{"value":"0.4030766785144806"}],[{"value":"70"},{"value":"1.0"},{"value":"0.40238282084465027"}],[{"value":"71"},{"value":"1.0"},{"value":"0.39361485838890076"}],[{"value":"72"},{"value":"1.0"},{"value":"0.3854232132434845"}],[{"value":"73"},{"value":"1.0"},{"value":"0.3780963122844696"}],[{"value":"74"},{"value":"1.0"},{"value":"0.35947659611701965"}],[{"value":"75"},{"value":"1.0"},{"value":"0.34985068440437317"}],[{"value":"76"},{"value":"1.0"},{"value":"0.3424440920352936"}],[{"value":"77"},{"value":"1.0"},{"value":"0.33142006397247314"}],[{"value":"78"},{"value":"1.0"},{"value":"0.3167422115802765"}],[{"value":"79"},{"value":"1.0"},{"value":"0.30903032422065735"}],[{"value":"80"},{"value":"1.0"},{"value":"0.29447099566459656"}],[{"value":"81"},{"value":"1.0"},{"value":"0.2922643721103668"}],[{"value":"82"},{"value":"1.0"},{"value":"0.2906268239021301"}],[{"value":"83"},{"value":"1.0"},{"value":"0.2606949210166931"}],[{"value":"84"},{"value":"1.0"},{"value":"0.23659643530845642"}],[{"value":"85"},{"value":"1.0"},{"value":"0.20980115234851837"}],[{"value":"86"},{"value":"1.0"},{"value":"0.19088388979434967"}],[{"value":"87"},{"value":"1.0"},{"value":"0.18653739988803864"}],[{"value":"88"},{"value":"1.0"},{"value":"0.14950573444366455"}],[{"value":"89"},{"value":"1.0"},{"value":"0.13690268993377686"}],[{"value":"90"},{"value":"1.0"},{"value":"0.06328210234642029"}],[{"value":"91"},{"value":"1.0"},{"value":"0.0314619205892086"}],[{"value":"92"},{"value":"1.0"},{"value":"0.016740668565034866"}],[{"value":"93"},{"value":"1.0"},{"value":"0.016667891293764114"}],[{"value":"94"},{"value":"1.0"},{"value":"0.016526099294424057"}],[{"value":"95"},{"value":"1.0"},{"value":"0.015795854851603508"}],[{"value":"96"},{"value":"1.0"},{"value":"0.015559518709778786"}],[{"value":"97"},{"value":"1.0"},{"value":"0.014686117880046368"}],[{"value":"98"},{"value":"1.0"},{"value":"0.008753995411098003"}],[{"value":"99"},{"value":"1.0"},{"value":"0.007522683124989271"}]],"columnNames":[{"name":"sample_size","index":0,"aggr":"sum"},{"name":"responses","index":1,"aggr":"sum"},{"name":"prediction","index":2,"aggr":"sum"}],"rows":[["0","0.023255813953488372","0.924351692199707"],["1","0.046511627906976744","0.9129927754402161"],["2","0.06976744186046512","0.9125118255615234"],["3","0.06976744186046512","0.9093866348266602"],["4","0.06976744186046512","0.9062002897262573"],["5","0.09302325581395349","0.9000930786132812"],["6","0.11627906976744186","0.8891617655754089"],["7","0.13953488372093023","0.887304425239563"],["8","0.16279069767441862","0.8799930214881897"],["9","0.18604651162790697","0.8797863721847534"],["10","0.20930232558139536","0.8704000115394592"],["11","0.23255813953488372","0.8675511479377747"],["12","0.2558139534883721","0.8658813834190369"],["13","0.27906976744186046","0.8627766966819763"],["14","0.3023255813953488","0.8602023124694824"],["15","0.32558139534883723","0.8596631288528442"],["16","0.3488372093023256","0.8583450317382812"],["17","0.37209302325581395","0.8230068683624268"],["18","0.3953488372093023","0.81925368309021"],["19","0.4186046511627907","0.8155286908149719"],["20","0.4418604651162791","0.8151432871818542"],["21","0.46511627906976744","0.8097782731056213"],["22","0.4883720930232558","0.8068200349807739"],["23","0.5116279069767442","0.7987463474273682"],["24","0.5116279069767442","0.7819666266441345"],["25","0.5116279069767442","0.7755333781242371"],["26","0.5348837209302325","0.7658251523971558"],["27","0.5581395348837209","0.7554816603660583"],["28","0.5813953488372093","0.7544440031051636"],["29","0.5813953488372093","0.7524316906929016"],["30","0.5813953488372093","0.7511333227157593"],["31","0.5813953488372093","0.7448474764823914"],["32","0.6046511627906976","0.7427705526351929"],["33","0.6046511627906976","0.7372673749923706"],["34","0.627906976744186","0.7261765003204346"],["35","0.6511627906976745","0.7177703380584717"],["36","0.6744186046511628","0.7169880867004395"],["37","0.6976744186046512","0.7146859765052795"],["38","0.6976744186046512","0.7144321203231812"],["39","0.7209302325581395","0.7126651406288147"],["40","0.7441860465116279","0.7058287262916565"],["41","0.7441860465116279","0.7052389979362488"],["42","0.7674418604651163","0.6861873865127563"],["43","0.7674418604651163","0.6774204969406128"],["44","0.7674418604651163","0.6480202078819275"],["45","0.7906976744186046","0.6305401921272278"],["46","0.813953488372093","0.6221232414245605"],["47","0.8372093023255814","0.6097898483276367"],["48","0.8604651162790697","0.5949468016624451"],["49","0.8604651162790697","0.5914656519889832"],["50","0.8604651162790697","0.5621809363365173"],["51","0.8837209302325582","0.5612388253211975"],["52","0.9069767441860465","0.5356816053390503"],["53","0.9069767441860465","0.5218115448951721"],["54","0.9069767441860465","0.5150982737541199"],["55","0.9069767441860465","0.5114401578903198"],["56","0.9069767441860465","0.5099711418151855"],["57","0.9069767441860465","0.5058027505874634"],["58","0.9302325581395349","0.5048250555992126"],["59","0.9302325581395349","0.5016961097717285"],["60","0.9302325581395349","0.4923882484436035"],["61","0.9534883720930233","0.4670853316783905"],["62","0.9534883720930233","0.4645720422267914"],["63","0.9534883720930233","0.4418201744556427"],["64","0.9534883720930233","0.4240017235279083"],["65","0.9767441860465116","0.42266637086868286"],["66","0.9767441860465116","0.4156034290790558"],["67","0.9767441860465116","0.41468876600265503"],["68","0.9767441860465116","0.4047994613647461"],["69","1.0","0.4030766785144806"],["70","1.0","0.40238282084465027"],["71","1.0","0.39361485838890076"],["72","1.0","0.3854232132434845"],["73","1.0","0.3780963122844696"],["74","1.0","0.35947659611701965"],["75","1.0","0.34985068440437317"],["76","1.0","0.3424440920352936"],["77","1.0","0.33142006397247314"],["78","1.0","0.3167422115802765"],["79","1.0","0.30903032422065735"],["80","1.0","0.29447099566459656"],["81","1.0","0.2922643721103668"],["82","1.0","0.2906268239021301"],["83","1.0","0.2606949210166931"],["84","1.0","0.23659643530845642"],["85","1.0","0.20980115234851837"],["86","1.0","0.19088388979434967"],["87","1.0","0.18653739988803864"],["88","1.0","0.14950573444366455"],["89","1.0","0.13690268993377686"],["90","1.0","0.06328210234642029"],["91","1.0","0.0314619205892086"],["92","1.0","0.016740668565034866"],["93","1.0","0.016667891293764114"],["94","1.0","0.016526099294424057"],["95","1.0","0.015795854851603508"],["96","1.0","0.015559518709778786"],["97","1.0","0.014686117880046368"],["98","1.0","0.008753995411098003"],["99","1.0","0.007522683124989271"]]},"dateCreated":"2016-11-25T11:39:43-0200","dateStarted":"2016-11-29T06:21:24-0200","dateFinished":"2016-11-29T06:21:27-0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:117"},{"text":"","dateUpdated":"2016-11-28T12:41:45-0200","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1480344048269_-561372484","id":"20161128-124048_1135984689","dateCreated":"2016-11-28T12:40:48-0200","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:118"}],"name":"Target Telemarketing -Scaladores","id":"2C29XVEV3","angularObjects":{"2BZXS3YN3:shared_process":[],"2BYYWDKJQ:shared_process":[],"2BZ2D6X5A:shared_process":[],"2BYMB3VKR:shared_process":[],"2C181VRYX:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}